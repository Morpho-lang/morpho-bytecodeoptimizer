
import bytecodeoptimizer

import meshtools
import optimize
import plot 

var R = 1.0 // Radius of sphere

// Initialize the filament with a given value of OmegaInv and Phi,
// the two dimensionless parameters explored in the paper.
var OmegaInv = 0.1 // Strength of bending energy relative to gravity
var Phi = 5 // Angular arclength of filament (2*Pi is a complete circle)

// Other parameters
var regulator = 5 // Strength of mesh regularizer (set emperically)

var N = 20 // Number of elements to discretize the filament
var Nsteps = 500 // Number of optimization steps
var initialStepSize = 0.001 // Initial stepsize for the optimizer

var jgl = [ 
    [ 0.88979, 0.0316753, 0.308167 ],
    [ 1.70618, -0.916912, -1.41756 ],
    [ -0.309375, -1.67052, 1.12888 ],
    [ -0.158982, 1.61711, 1.18787 ],
    [ -0.225683, 0.218425, -0.2793 ],
    [ 0.0790808, -1.20775, 1.31379 ],
    [ 0.293475, 1.06162, 1.41015 ],
    [ 0.227671, 0.209687, -0.872812 ],
    [ -0.737132, 0.691981, 0.712494 ],
    [ -0.433191, -0.0876627, 1.09242 ],
    [ 0.261001, -0.10962, -0.374452 ],
    [ -0.948672, -1.74124, 0.163315 ],
    [ 0.545957, -0.48948, 0.0040951 ],
    [ -0.636756, 0.801744, 0.0737815 ],
    [ -0.473272, 1.22907, 1.25912 ],
    [ -0.0526203, -0.217345, 0.171237 ],
    [ -1.25389, 0.348259, 0.812885 ],
    [ 0.408278, 0.418075, -0.496568 ],
    [ 0.0785225, 0.756079, -0.399736 ],
    [ 0.318478, -0.506288, 0.338954 ],
    [ 0.183602, 0.275186, 0.25626 ],
    [ -0.449892, -0.284885, 1.19757 ],
    [ -0.861014, -0.37932, 2.76439 ],
    [ 0.448206, -1.05736, -0.064931 ],
    [ 0.903463, 0.43829, 1.463 ],
    [ 0.294568, -0.365872, 0.264512 ],
    [ -0.0446793, 1.34905, 0.770112 ],
    [ -0.301972, 0.597722, -1.14123 ],
    [ 0.189866, 0.922798, -1.66057 ],
    [ -0.400746, 0.0824574, -0.725266 ],
    [ -0.0432027, 1.79626, 0.287567 ]
]

// Function to jiggle vertex positions by a small amount
fn jiggle(m, noise) {
    for (id in 1...m.count()) {
        var x = m.vertexposition(id)
        x += noise*Matrix(jgl[id-1])
        m.setvertexposition(id, x)
    }
}

// Visualize the filament and the covering sphere
fn visualize(m, m0) {
    var gball=Graphics()
    gball.display(Sphere([0,0,0], R-0.05)) 
    gball.display(Arrow([0,0,R], [0,0,R+0.2])) 
    gball.display(Arrow([0,0,-R-0.4], [0,0,-R-0.2]))

    return plotmesh(m, grade=[0,1]) + gball + plotmesh(m0, color=Blue)
}

// Generate initial mesh
var m = LineMesh(fn (t) [R*sin(t), 0, R*cos(t)], 0..Phi:Pi/N) 
var m0 = m.clone()

// Setup optimization problem 
var problem = OptimizationProblem(m) 

// Bending energy
var linecurv = LineCurvatureSq()
problem.addenergy(linecurv, prefactor = OmegaInv) 

// Gravitational potential energy
var up = Matrix([0,0,1])
var gravity = LineIntegral(fn (x) x.inner(up)) 
problem.addenergy(gravity) // The prefactor for this is normalized to be 1

// Constrain the total length
problem.addconstraint(Length())

// Constraint for the filament to lie on the sphere
var lc = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-R^2)
problem.addlocalconstraint(lc) 

// Regularization penalty function to ensure similar-sized elements
var eq = EquiElement()
problem.addenergy(eq, prefactor=regulator) 

// Set up the optimizer
var opt = ShapeOptimizer(problem, m) 

// Fixing the top end of the filament
var top = Selection(m, fn(x,y,z) x^2+y^2+(z-R)^2<0.0001)
opt.fix(top)
opt.stepsize = initialStepSize

// Before optimizing, we wriggle the filament a little, to kick it out of the local minimum initial condition
jiggle(m, 0.005)
opt.conjugategradient(Nsteps) 

print opt.totalenergy() 
